{"version":3,"sources":["config.js","hash.js","Playlists.js","App.js","serviceWorker.js","index.js"],"names":["scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Playlists","className","this","props","playlists","map","playlist","key","id","onClick","action","style","background","selected","color","src","images","length","url","alt","name","backgroundImage","Component","App","state","token","display_name","neteasesearch","NEsongs","sel_playlist","songs_to_import","hi","bind","getPlaylists","getNetease","searchSong","importSongs","selectPlaylist","handleChange","selectAll","_token","access_token","setState","$","type","beforeSend","xhr","setRequestHeader","success","data","limit","offset","items","song_list","param_list","params","forEach","element","index","push","query","uris","alert","song_name","artist_name","q","tracks","prevState","artists","uri","event","preventDefault","console","log","code","trackIds","ids","trackdata","songs","ar","e","target","value","song","onSubmit","onChange","href","join","fontSize","selectSong","width","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAMaA,EAAS,CAClB,gBACA,8BACA,2BACA,yBACA,2BCVEC,EAAOC,OAAOC,SAASF,KAC1BG,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASC,GACxB,GAAIA,EAAM,CACR,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOF,IACN,IACLL,OAAOC,SAASF,KAAO,GAERA,QCkBAU,G,6KA1BD,IAAD,OACL,OAEI,yBAAKC,UAAU,gBACVC,KAAKC,MAAMC,UAAUC,KAAI,SAACC,GAAD,OACtB,yBAAKC,IAAKD,EAASE,GAAIC,QAAS,kBAAM,EAAKN,MAAMO,OAAOJ,EAASE,MAC7D,yBAAKP,UAAU,mBAAmBU,MAAO,CAAEC,WAAa,EAAKT,MAAMU,WAAaP,EAASE,GAAK,UAAY,GAAKM,MAAQ,EAAKX,MAAMU,WAAaP,EAASE,GAAK,OAAS,KAClK,yBAAKP,UAAU,oBACX,yBAAKA,UAAU,YAAYc,IAAiC,IAA3BT,EAASU,OAAOC,OAAgBX,EAASU,OAAO,GAAGE,IAAM,+DAAgEC,IAAI,iBAElK,yBAAKlB,UAAU,qBACX,yBAAKA,UAAU,qBAAqBK,EAASc,OAEjD,yBAAKnB,UAAU,aAAaU,MAAO,CAC/BU,gBAAgB,OAAD,OACiB,IAA3Bf,EAASU,OAAOC,OAAgBX,EAASU,OAAO,GAAGE,IAAM,+DAD/C,QAGb,c,GAnBVI,cC8RTC,G,wDAtRb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CACXC,MAAO,KACPC,aAAc,gBACdtB,UAAW,GACXuB,cAAe,WACfC,QAAS,GACTC,aAAc,KACdC,gBAAiB,IAEnB,EAAKC,GAAK,EAAKA,GAAGC,KAAR,gBACV,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBACnB,EAAKK,eAAiB,EAAKA,eAAeL,KAApB,gBACtB,EAAKM,aAAe,EAAKA,aAAaN,KAAlB,gBACpB,EAAKO,UAAY,EAAKA,UAAUP,KAAf,gBAlBA,E,gEAsBjB,IAAIQ,EAASlD,EAAKmD,aAEdD,IAEFtC,KAAKwC,SAAS,CACZjB,MAAOe,IAETtC,KAAK6B,GAAGS,GACRtC,KAAK+B,aAAaO,M,yBAInBf,GAAQ,IAAD,OAERkB,OAAO,CACLzB,IAAK,gCACL0B,KAAM,MACNC,WAAY,SAAAC,GACVA,EAAIC,iBAAiB,gBAAiB,UAAYtB,IAEpDuB,QAAS,SAAAC,GACP,EAAKP,SAAS,CACZhB,aAAcuB,EAAKvB,oB,mCAMdD,GAAQ,IAAD,OAElBkB,OAAO,CACLzB,IAAK,0CACL0B,KAAM,MACNK,KAAM,CACJC,MAAO,GACPC,OAAQ,GAEVN,WAAY,SAAAC,GACVA,EAAIC,iBAAiB,gBAAiB,UAAYtB,IAEpDuB,QAAS,SAAAC,GAEP,EAAKP,SAAS,CACZtC,UAAW6C,EAAKG,a,oCAMT,IAAD,OAEZ,GAAgC,OAA5BlD,KAAKsB,MAAMK,aAAf,CAIA,IAAIwB,EAAS,YAAOnD,KAAKsB,MAAMI,SAC3B0B,EAAa,GACbC,EAAS,GACbF,EAAUG,SAAQ,SAACC,EAASC,GACtBA,EAAQ,KAAO,IACjBJ,EAAWK,KAAKJ,EAAO9D,UAAU,EAAG8D,EAAOtC,OAAS,IACpDsC,EAAS,IAEPE,EAAQ,KACVF,EAASA,EAASE,EAAQ,GAAK,IAC/BA,EAAQ,IAAMA,EAAQ,OAG1BH,EAAWK,KAAKJ,EAAO9D,UAAU,EAAG8D,EAAOtC,OAAS,IACpDqC,EAAWE,SAAQ,SAACI,GAClBjB,OAAO,CACLzB,IAAK,0CAA2C,EAAKM,MAAMK,aAAe,WAAac,QAAQ,CAAEkB,KAAMD,IACvGhB,KAAM,OAGNC,WAAY,SAAAC,GACVA,EAAIC,iBAAiB,gBAAiB,UAAY,EAAKvB,MAAMC,QAE/DuB,QAAS,SAAAC,GACP,EAAKP,SAAS,CACZd,QAASyB,eA5BfS,MAAM,8B,iCAmCCC,EAAWC,GAAc,IAAD,OAEjCrB,OAAO,CACLzB,IAAK,oCACL0B,KAAM,MACNK,KAAM,CACJgB,EAAG,UAAYF,EAAY,aAAeC,EAAc,IACxDpB,KAAM,QACNM,MAAO,GAETL,WAAY,SAAAC,GACVA,EAAIC,iBAAiB,gBAAiB,UAAY,EAAKvB,MAAMC,QAE/DuB,QAAS,SAAAC,GAC0B,IAA7BA,EAAKiB,OAAOd,MAAMnC,OAGpB,EAAKyB,UAAS,SAAAyB,GAAS,MAAK,CAC1BvC,QAAQ,GAAD,mBAAMuC,EAAUvC,SAAhB,CAAyB,CAACmC,EAAWC,EAAaf,EAAKiB,OAAOd,MAAM,GAAGhC,KAAM6B,EAAKiB,OAAOd,MAAM,GAAGgB,QAAQ,GAAGhD,MAAM,EAAO6B,EAAKiB,OAAOd,MAAM,GAAGiB,WAGxJ,EAAK3B,UAAS,SAAAyB,GAAS,MAAK,CAC1BvC,QAAQ,GAAD,mBAAMuC,EAAUvC,SAAhB,CAAyB,CAACmC,EAAWC,EAAa,MAAO,OAAO,EAAO,e,iCAU7EM,GAAQ,IAAD,OAChBA,EAAMC,iBACNrE,KAAKwC,SAAS,CACZd,QAAS,KAEXe,OAAO,CACLzB,IAAK,8CACL0B,KAAM,MACNK,KAAM,CACJzC,GAAIN,KAAKsB,MAAMG,eAEjBqB,QAAS,SAAAC,GAGPuB,QAAQC,IAAIxB,GACM,MAAdA,EAAKyB,KAITzB,EAAK3C,SAASqE,SAASnB,SAAQ,SAAAC,GAC7Bd,OAAO,CACLzB,IAAK,0CACL0B,KAAM,MACNK,KAAM,CACJ2B,IAAKnB,EAAQjD,IAEfwC,QAAS,SAAA6B,GAEP,EAAK1C,WAAW0C,EAAUC,MAAM,GAAG1D,KAAMyD,EAAUC,MAAM,GAAGC,GAAG,GAAG3D,YAZtE0C,MAAM,gC,iCAqBHJ,EAAOsB,GAChBA,EAAET,iBAEF,IAAIlB,EAAS,YAAOnD,KAAKsB,MAAMI,SACH,QAAxByB,EAAUK,GAAO,KACnBL,EAAUK,GAAO,IAAML,EAAUK,GAAO,GACxCxD,KAAKwC,SAAS,CAAEd,QAASyB,O,qCAId/C,GAEbJ,KAAKwC,SAAS,CAAEb,aAAcvB,M,mCAGnBgE,GACXpE,KAAKwC,SAAS,CAAEf,cAAe2C,EAAMW,OAAOC,U,kCAK5C,IAAI7B,EAAS,YAAOnD,KAAKsB,MAAMI,SAC/ByB,EAAUG,SAAQ,SAAA2B,GACA,QAAZA,EAAK,KAAcA,EAAK,IAAK,MAEnCjF,KAAKwC,SAAS,CAAEd,QAASyB,M,+BAIjB,IAAD,OACP,OACE,yBAAKpD,UAAU,OACb,yBAAKO,GAAG,QAELN,KAAKsB,MAAMC,OAAS,0BAAM2D,SAAUlF,KAAKgC,YACxC,+BACE,2BAAOU,KAAK,OAAOxB,KAAK,MAAM8D,MAAOhF,KAAKsB,MAAMG,cAAe0D,SAAUnF,KAAKoC,aAAcrC,UAAU,iBAExG,2BAAO2C,KAAK,SAASsC,MAAM,eAAejF,UAAU,gBAGvB,IAA9BC,KAAKsB,MAAMI,QAAQX,QAAgB,4BAAQR,QAASP,KAAKkC,YAAanC,UAAU,OAA7C,UAGL,IAA9BC,KAAKsB,MAAMI,QAAQX,QAAgB,4BAAQR,QAASP,KAAKqC,UAAWtC,UAAU,OAA3C,eAKtC,yBAAKO,GAAG,SACJN,KAAKsB,MAAMC,OACX,4BAAQxB,UAAU,cAChB,uBACEA,UAAU,yBACVqF,KAAI,UHnPQ,yCGmPR,sBHhPI,mCGgPJ,yBH/OO,uDG+OP,kBAA6EjG,EAAOkG,KACtF,OADE,0CAFN,qBAWHrF,KAAKsB,MAAMC,OAAS,2BAAOxB,UAAU,aACpC,+BACE,4BACE,wBAAIU,MAAO,CAAE6E,SAAU,UAAvB,WACA,wBAAI7E,MAAO,CAAE6E,SAAU,UAAvB,WACA,wBAAI7E,MAAO,CAAE6E,SAAU,UAAvB,aAGJ,+BAEGtF,KAAKsB,MAAMI,QAAQvB,KAAI,SAAC8E,EAAMzB,GAAP,OACtB,wBAAInD,IAAK4E,EAAK,GAAI1E,QAAS,EAAKgF,WAAWzD,KAAK,EAAM0B,GAAQzD,UAAU,YACtE,wBAAIU,MAAO,CAAEC,WAAauE,EAAK,GAAK,UAAY,GAAKrE,MAAQqE,EAAK,GAAK,OAAS,KAAO,uBAAGlF,UAAU,aAAakF,EAAK,IAAO,uBAAGlF,UAAU,eAAekF,EAAK,KAC9J,wBAAIxE,MAAO,CAAEC,WAAauE,EAAK,GAAK,UAAY,GAAKrE,MAAQqE,EAAK,GAAK,OAAS,KAAO,uBAAGlF,UAAU,aAAakF,EAAK,IAAO,uBAAGlF,UAAU,eAAekF,EAAK,KAC9J,wBAAIxE,MAAO,CAAEC,WAAauE,EAAK,GAAK,UAAY,GAAKrE,MAAQqE,EAAK,GAAK,OAAS,KAAhF,aAMV,yBAAK3E,GAAG,OAAOG,MAAO,CAAE+E,MAAQxF,KAAKsB,MAAMC,MAAQ,MAAQ,SACxDvB,KAAKsB,MAAMC,OACV,6BACE,kBAAC,EAAD,CACErB,UAAWF,KAAKsB,MAAMpB,UACtBM,OAAQR,KAAKmC,eACbxB,SAAUX,KAAKsB,MAAMK,gBAI1B3B,KAAKsB,MAAME,mB,GAhRJJ,cCEEqE,QACW,cAA7BpG,OAAOC,SAASoG,UAEe,UAA7BrG,OAAOC,SAASoG,UAEhBrG,OAAOC,SAASoG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.db383004.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"60707a33a22f4caaa987faa27cd9251b\";\nexport const redirectUri = \"https://zhangtia.github.io/Spotify-Netease-Importer/\";\n//export const redirectUri = \"http://localhost:3000/\";\nexport const scopes = [\n    \"user-top-read\",\n    \"user-read-currently-playing\",\n    \"user-read-playback-state\",\n    \"playlist-modify-public\",\n    \"playlist-modify-private\"\n];\n","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;\n","import React, { Component } from \"react\";\nimport \"./Player.css\";\n\nclass Playlists extends Component {\n\n    render() {\n        return (\n\n            <div className=\"App-playlist\">\n                {this.props.playlists.map((playlist) => (\n                    <div key={playlist.id} onClick={() => this.props.action(playlist.id)}>\n                        <div className=\"main-wrapper btn\" style={{ background: (this.props.selected === playlist.id ? \"#1ecd97\" : \"\"), color: (this.props.selected === playlist.id ? \"#333\" : \"\") }}>\n                            <div className=\"now-playing__img\">\n                                <img className=\"album-img\" src={(playlist.images.length !== 0) ? playlist.images[0].url : \"https://img.icons8.com/material-sharp/24/000000/no-image.png\"} alt=\"album-cover\"/>\n                            </div>\n                            <div className=\"now-playing__side\">\n                                <div className=\"now-playing__name\">{playlist.name}</div>\n                            </div>\n                            <div className=\"background\" style={{\n                                backgroundImage: `url(${\n                                    (playlist.images.length !== 0) ? playlist.images[0].url : \"https://img.icons8.com/material-sharp/24/000000/no-image.png\"\n                                    })`,\n                            }} />{\" \"}\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default Playlists;\n","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\nimport Playlists from \"./Playlists\";\nimport \"./App.css\";\n\n// https://medium.com/@jonnykalambay/now-playing-using-spotifys-awesome-api-with-react-7db8173a7b13\n// https://levelup.gitconnected.com/how-to-build-a-spotify-player-with-react-in-15-minutes-7e01991bc4b6\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: null,\n      display_name: \"not logged in\",\n      playlists: [],\n      neteasesearch: 2842615416,\n      NEsongs: [],\n      sel_playlist: null,\n      songs_to_import: []\n    };\n    this.hi = this.hi.bind(this);\n    this.getPlaylists = this.getPlaylists.bind(this);\n    this.getNetease = this.getNetease.bind(this);\n    this.searchSong = this.searchSong.bind(this);\n    this.importSongs = this.importSongs.bind(this);\n    this.selectPlaylist = this.selectPlaylist.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.selectAll = this.selectAll.bind(this);\n  }\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      this.hi(_token);\n      this.getPlaylists(_token);\n    }\n  }\n\n  hi(token) {\n    //e.preventDefault();\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        this.setState({\n          display_name: data.display_name\n        });\n      }\n    });\n  }\n\n  getPlaylists(token) {\n    //e.preventDefault();\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/playlists\",\n      type: \"GET\",\n      data: {\n        limit: 50,\n        offset: 0,\n      },\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        //alert(data.items);\n        this.setState({\n          playlists: data.items\n        });\n      }\n    });\n  }\n\n  importSongs() {\n    //e.preventDefault();\n    if (this.state.sel_playlist === null) {\n      alert(\"Please select a playlist\");\n      return;\n    }\n    let song_list = [...this.state.NEsongs];\n    let param_list = [];\n    let params = \"\";\n    song_list.forEach((element, index) => {\n      if (index % 50 === 0) {\n        param_list.push(params.substring(0, params.length - 1));\n        params = \"\";\n      }\n      if (element[4]) {\n        params = params + element[5] + \",\";\n        element[4] = !element[4];\n      }\n    })\n    param_list.push(params.substring(0, params.length - 1));\n    param_list.forEach((query) => {\n      $.ajax({\n        url: \"\thttps://api.spotify.com/v1/playlists/\" + this.state.sel_playlist + \"/tracks?\" + $.param({ uris: query }),\n        type: \"POST\",\n        //dataType: 'json',\n        //data: JSON.stringify({ \"uris\": \"spotify:track:3VlbOrM6nYPprVvzBZllE5,spotify:track:3dmfvWITuVs9OumXtwpAPJ\" }),\n        beforeSend: xhr => {\n          xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.state.token);\n        },\n        success: data => {\n          this.setState({\n            NEsongs: song_list\n          });\n        }\n      });\n    })\n  }\n\n  searchSong(song_name, artist_name) {\n    //e.preventDefault();\n    $.ajax({\n      url: \"https://api.spotify.com/v1/search\",\n      type: \"GET\",\n      data: {\n        q: \"track:'\" + song_name + \"' artist:'\" + artist_name + \"'\",\n        type: \"track\",\n        limit: 1\n      },\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.state.token);\n      },\n      success: data => {\n        if (data.tracks.items.length !== 0) {\n          //console.log(data.tracks);\n          //alert(data.tracks.items[0].name);\n          this.setState(prevState => ({\n            NEsongs: [...prevState.NEsongs, [song_name, artist_name, data.tracks.items[0].name, data.tracks.items[0].artists[0].name, false, data.tracks.items[0].uri]]\n          }));\n        } else {\n          this.setState(prevState => ({\n            NEsongs: [...prevState.NEsongs, [song_name, artist_name, \"N/A\", \"N/A\", false, \"\"]]\n          }));\n        }\n        //this.setState({\n        //playlists: data.items\n        //});\n      }\n    });\n  }\n\n  getNetease(event) {\n    event.preventDefault();\n    this.setState({\n      NEsongs: []\n    });\n    $.ajax({\n      url: \"https://musicapi.leanapp.cn/playlist/detail\",\n      type: \"GET\",\n      data: {\n        id: this.state.neteasesearch,\n      },\n      success: data => {\n        //alert(data.playlist.trackIds[4].id);\n        //alert(data.playlist.trackIds[3].id);\n        console.log(data);\n        if (data.code !== 200) {\n          alert(\"Error fetching playlist\");\n          return;\n        }\n        data.playlist.trackIds.forEach(element => {\n          $.ajax({\n            url: \"https://musicapi.leanapp.cn/song/detail\",\n            type: \"GET\",\n            data: {\n              ids: element.id,\n            },\n            success: trackdata => {\n              //alert(trackdata.songs[0].name);\n              this.searchSong(trackdata.songs[0].name, trackdata.songs[0].ar[0].name);\n            }\n          });\n        });\n\n      }\n    });\n  }\n\n  selectSong(index, e) {\n    e.preventDefault();\n    //alert(index);\n    let song_list = [...this.state.NEsongs];\n    if (song_list[index][3] !== \"N/A\") {\n      song_list[index][4] = !song_list[index][4];\n      this.setState({ NEsongs: song_list });\n    }\n  }\n\n  selectPlaylist(playlist) {\n    //console.log(playlist);\n    this.setState({ sel_playlist: playlist });\n  }\n\n  handleChange(event) {\n    this.setState({ neteasesearch: event.target.value })\n  }\n\n  selectAll() {\n    //alert(index);\n    let song_list = [...this.state.NEsongs];\n    song_list.forEach(song => {\n      if (song[3] !== \"N/A\") song[4] = true;\n    });\n    this.setState({ NEsongs: song_list });\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"col1\">\n\n          {this.state.token && <form onSubmit={this.getNetease}>\n            <label>\n              <input type=\"text\" name=\"url\" value={this.state.neteasesearch} onChange={this.handleChange} className=\"input-field\" />\n            </label>\n            <input type=\"submit\" value=\"get playlist\" className=\"submit-btn\" />\n          </form>}\n\n          {this.state.NEsongs.length !== 0 && <button onClick={this.importSongs} className=\"btn\">\n            IMPORT\n              </button>}\n          {this.state.NEsongs.length !== 0 && <button onClick={this.selectAll} className=\"btn\">\n            SELECT ALL\n              </button>}\n\n        </div>\n        <div id=\"col2\">\n          {!this.state.token && (\n            <header className=\"App-header\">\n              <a\n                className=\"btn btn--loginApp-link\"\n                href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                  \"%20\"\n                )}&response_type=token&show_dialog=true`}\n              >\n                Login to Spotify\n            </a>\n            </header>\n          )}\n\n          {this.state.token && <table className=\"Song-list\">\n            <thead>\n              <tr>\n                <th style={{ fontSize: \"0.7em\" }}>Netease</th>\n                <th style={{ fontSize: \"0.7em\" }}>Spotify</th>\n                <th style={{ fontSize: \"0.7em\" }}>Import?</th>\n              </tr>\n            </thead>\n            <tbody>\n\n              {this.state.NEsongs.map((song, index) => (\n                <tr key={song[0]} onClick={this.selectSong.bind(this, index)} className=\"Song-row\">\n                  <td style={{ background: (song[4] ? \"#1ecd97\" : \"\"), color: (song[4] ? \"#333\" : \"\") }}><p className=\"Song-name\">{song[0]}</p><p className=\"Artist-name\">{song[1]}</p></td>\n                  <td style={{ background: (song[4] ? \"#1ecd97\" : \"\"), color: (song[4] ? \"#333\" : \"\") }}><p className=\"Song-name\">{song[2]}</p><p className=\"Artist-name\">{song[3]}</p></td>\n                  <td style={{ background: (song[4] ? \"#1ecd97\" : \"\"), color: (song[4] ? \"#333\" : \"\") }}>[]</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>}\n        </div>\n        <div id=\"col3\" style={{ width: (this.state.token ? \"25%\" : \"100%\") }}>\n          {this.state.token && (\n            <div>\n              <Playlists\n                playlists={this.state.playlists}\n                action={this.selectPlaylist}\n                selected={this.state.sel_playlist}\n              />\n            </div>\n          )}\n          {this.state.display_name}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}